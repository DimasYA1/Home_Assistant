#################################################
# Notifications
#################################################

- alias: "Home Presence Alert"
  initial_state: true
  trigger:
    platform: state
    entity_id: person.dimasya1, person.tatiana
  condition:
    condition: and
    conditions:
      #      - condition: template
      #        value_template: "{{ states('sensor.uptime') != '0.0' }}"
      - condition: template
        value_template: "{{ trigger.to_state.state != trigger.from_state.state }}"
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: >
          {{ trigger.to_state.attributes.friendly_name }}
          {% if trigger.to_state.state == 'home' %}дома!
          {% else %}скорее всего вне дома.
          {% endif %}
- alias: "HASS: Login Failed [notify to stall]"
  trigger:
    - platform: state
      entity_id: persistent_notification.http_login
  condition:
    - condition: template
      value_template: "{{ trigger.to_state.state != off }}"
  action:
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_id_dimasya1
        disable_web_page_preview: true
        message: |
          *Внимание!*
          Неудачная попытка входа, ошибка авторизации!
          Источник: {{ state_attr('persistent_notification.http_login','message') | regex_findall_index('from (.*)\. ') }}
          _http://whatismyipaddress.com/ip/{{ state_attr('persistent_notification.http_login','message') | regex_findall_index('\((.*)\)') }}_
    - service: persistent_notification.dismiss
      data:
        notification_id: http_login

- alias: "HASS: IP Banned [notify to stall]"
  trigger:
    - platform: state
      entity_id: persistent_notification.ip_ban
  action:
    - service: telegram_bot.send_message
      data:
        target: !secret telegram_id_dimasya1
        disable_web_page_preview: true
        message: |
          *Внимание!*
          Заблокирован IP: {{ state_attr('persistent_notification.ip_ban', 'message').split('Too many login attempts from ')[1] }}
          _http://whatismyipaddress.com/ip/{{ state_attr('persistent_notification.ip_ban', 'message').split('Too many login attempts from ')[1] }}_
    - service: persistent_notification.dismiss
      data:
        notification_id: ip_ban

- alias: "HASS: Home Assistant Start"
  initial_state: true
  trigger:
    - platform: homeassistant
      event: start
  action:
    service: notify.telegram_id_dimasya1
    data:
      message: "_INFO:_ Home Assistant *запущен* за {{ states('sensor.start_time') }} сек."

- alias: "HASS: Home Assistant Shutdown"
  initial_state: true
  trigger:
    platform: homeassistant
    event: shutdown
  action:
    - service: notify.telegram_id_dimasya1
      data:
        message: "_INFO:_ Home Assistant *остановлен*."

- alias: "HASS: ERRORs in System Log [notify to stall]"
  initial_state: false
  trigger:
    platform: event
    event_type: system_log_event
    event_data:
      level: ERROR
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: "_{{ trigger.event.data.level }}:_ {{ trigger.event.data.message }}"

- alias: "HASS: WARNINGs in System Log [notify to stall]"
  initial_state: false
  trigger:
    platform: event
    event_type: system_log_event
    event_data:
      level: WARNING
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: "_{{ trigger.event.data.level }}:_ {{ trigger.event.data.message }}"

- alias: "HASS: System Config Errors [notify to stall]"
  trigger:
    - platform: event
      event_type: call_service
      event_data:
        domain: persistent_notification
        service: create
  condition:
    - condition: or
      conditions:
        - condition: template
          value_template: >-
            {{ trigger.event.data.service_data.notification_id == 'homeassistant.check_config' }}
        - condition: template
          value_template: >-
            {{ trigger.event.data.service_data.notification_id == 'invalid_config' }}
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: |
          *Внимание, конфигурация содержит ошибки!*
          {% if trigger.event.data.service_data.notification_id == 'homeassistant.check_config' -%}
          Перезапуск HA отменён, подробности в логах.
          {% elif trigger.event.data.service_data.notification_id == 'invalid_config' -%}
          {{ trigger.event.data.service_data.message }}
          {% endif %}
    - service: persistent_notification.dismiss
      data:
        notification_id: >-
          {{ trigger.event.data.service_data.notification_id }}
- alias: "HASS: ERRORs in Automations [notify to stall]"
  mode: parallel
  trigger:
    - platform: event
      event_type: system_log_event
      event_data:
        level: ERROR
  condition:
    - condition: template
      value_template: "{{ 'Error while executing automation' in trigger.event.data.message or 'Error executing script' in trigger.event.data.message }}"
    - condition: template
      value_template: "{{ not 'automation.system_automation_error' in trigger.event.data.message }}"
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: |
          _INFO:_ Ошибка выполнения автоматизации: 
          {{ trigger.event.data.message }}.
- alias: "HASS: Critical Error [notify to stall]"
  mode: parallel
  trigger:
    - platform: event
      event_type: system_log_event
      event_data:
        level: FATAL
    - platform: event
      event_type: system_log_event
      event_data:
        level: CRITICAL
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: |
          Критическая ошибка системы:
          {{ trigger.event.data.message }}!
- alias: "HASSIO: New Version Available [notify to stall]"
  initial_state: true
  trigger:
    platform: template
    value_template: "{{ states('sensor.ha_version_current') < states('sensor.ha_version_latest') }}"
  action:
    service: notify.telegram_id_dimasya1
    data_template:
      message: "_INFO:_ Доступна новая версия Home Assistant ({{ states('sensor.ha_version_latest') }})"

- alias: "HASSIO: New Addons Update Available [notify to stall]"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.updater_addons
      from: "off"
      to: "on"
  condition:
    - condition: template
      value_template: "{{ states('sensor.supervisor_updates') | int > 0 }}"
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: "_INFO:_ Доступны новые версии Add-ons (Supervisor) (кол-во: {{ states('sensor.supervisor_updates') }})"

- alias: "HASSIO: New Supervisor Version Available [notify to stall]"
  initial_state: true
  trigger:
    - platform: state
      entity_id: binary_sensor.updater_supervisor
      from: "off"
      to: "on"
  action:
    - service: notify.telegram_id_dimasya1
      data_template:
        message: "_INFO:_ Доступна новая версия Supervisor ({{ state_attr('sensor.supervisor_updates', 'newest_version') }})"

- alias: "HACS: New Component Version Available [notify to stall]"
  initial_state: true
  trigger:
    platform: state
    entity_id: sensor.hacs
  condition:
    - condition: template
      value_template: "{{ (states('sensor.hacs') | int) > 0 }}"
  action:
    service: notify.telegram_id_dimasya1
    data_template:
      message: "_INFO:_ Доступны новые версии Custom Components (HACS) (кол-во: {{ states('sensor.hacs') }})"

# - alias: "Low Battery Alert [notify to stall]"
#   trigger:
#     - platform: event
#       event_type: state_changed
#   condition:
#     - condition: template
#       value_template: |
#         {{ trigger.event.data.entity_id in (expand('group.battery_devices') | map(attribute='entity_id')) }}
#     - condition: template
#       value_template: |
#         {{ not trigger.event.data.new_state.state in [unknown, unavailable] }}
#     - condition: template
#       value_template: |
#         {{ (trigger.event.data.new_state.state | int) < 20 }}
#   action:
#     - service: notify.telegram_id_dimasya1
#       data_template:
#         message: |
#           *Внимание, низкий заряд батареи!*
#           {{ trigger.event.data.new_state.attributes.friendly_name }}: {{ trigger.event.data.new_state.state }}%!
- alias: "Torrent Completed [notify to stall]"
  initial_state: true
  trigger:
    platform: event
    event_type: transmission_downloaded_torrent
  action:
    service: notify.telegram_id_dimasya1
    data_template:
      message: "Загрузка torrent-файла завершена"

- alias: "Полнолуние [notify to stall]"
  initial_state: true
  trigger:
    platform: state
    entity_id: sensor.moon
    to: "full_moon"
  action:
    service: notify.telegram_id_dimasya1
    data_template:
      message: "Сегодня полнолуние!"

# - alias: Entrance Door - Opened
#   initial_state: true
#   trigger:
#     platform: state
#     entity_id: binary_sensor.0x158d00031c790f_contact
#     from: "off"
#     to: "on"
#   action:
#     service: notify.telegram_id_dimasya1
#     data:
#       message: Открыта входная дверь!

# - alias: Entrance Door - Closed
#   initial_state: true
#   trigger:
#     platform: state
#     entity_id: binary_sensor.0x158d00031c790f_contact
#     from: "on"
#     to: "off"
#   action:
#     service: notify.telegram_id_dimasya1
#     data:
#       message: Входная дверь закрыта.

# - alias: Gas Alert
#   initial_state: true
#   trigger:
#     platform: state
#     entity_id: binary_sensor.0x158d000413b210_gas
#     from: "off"
#     to: "on"
#   action:
#     service: notify.telegram_id_dimasya1
#     data:
#       title: "*Внимание!*"
#       message: |
#         Сработал датчик *газа* на кухне.
#         Откройте окна и перекройте подачу газа (за холодильником).
- alias: New Network Device Notification
  initial_state: true
  mode: parallel
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
    service: notify.telegram_id_dimasya1
    data_template:
      title: "*Найдено новое устройство в сети!*"
      message: |
        MAC: {{ trigger.event.data.mac }}