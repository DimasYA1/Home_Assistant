#################################################
# Telegram Bot Automations
#################################################

# ---- Mirror all text messages
- alias: "Telegram Bot - Mirror text"
  trigger:
    platform: event
    event_type: telegram_text
  action:
    service: notify.telegram_id_dimasya1
    data_template:
      message: |
        *{{ trigger.event.data.from_first }} {{ trigger.event.data.from_last }} [{{ trigger.event.data.user_id }}] пишет:*
        {{ trigger.event.data.text }}
# ---- /start
- alias: "Telegram Bot - Start"
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/start"
  action:
    service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: "Привет! Помощь - /help"
# ---- /help
- alias: "Telegram Bot - Help"
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/help"
  action:
    service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: |
        Доступные комманды:
        /status - Текущий статус устройств
        /whoishome - Узнать кто дома
        /weather - Погода за окном
        /ping - Проверить доступность сервиса HASS
# ---- /ping
- alias: "Telegram Bot - Ping"
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/ping"
  action:
    service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: |
        Pong! _{{ now().strftime("%d.%m.%Y %H:%M:%S") }}_
        Current version: {{ states('sensor.ha_version_current') }}
        DB Size: {{ states('sensor.home_assistant_v2_db') }} {{ state_attr('sensor.home_assistant_v2_db','unit_of_measurement') }}
        Uptime: {{ states('sensor.ha_uptime') }}
# ---- /whoishome
- alias: "Telegram Bot - Who is home?"
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/whoishome"
  action:
    service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: |
        Сейчас дома:
        {%- set entites = expand('group.family_persons') %}{% for prs in entites %}{% if prs.state == "home" %}
        {{ prs.attributes.friendly_name }}{% endif %}{% endfor %}
        {% if is_state("group.family_persons", "not_home") %}Никого нет{% endif %}
# ---- /weather
- alias: "Telegram Bot - Weather"
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/weather"
  action:
    - service: telegram_bot.send_photo
      data_template:
        target: "{{ trigger.event.data.user_id }}"
        file: '/config/www/weather_icons/{{ states("weather.gismeteo") }}.webp'
        caption: |
          Температура {{ states('sensor.gismeteo_temperature') }}°C
          Ощущается как {{ states('sensor.gismeteo_temperature_feels_like') }}°C
          Влажность {{ states('sensor.gismeteo_humidity') }}%
          Давление {{ states('sensor.gismeteo_pressure') }} hPa ({{ states('sensor.gismeteo_pressure_mmhg') }} mmHg)
# ---- /status
- alias: "Telegram Bot - Status"
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: "/status"
  action:
    service: telegram_bot.send_message
    data_template:
      target: "{{ trigger.event.data.user_id }}"
      message: |
        *Климат*
        Гостинная: *{{ states('sensor.aqara_gostinnaya_temperature') }}°C*, {{ states('sensor.aqara_gostinnaya_humidity') }}%
        Кухня: *{{ states('sensor.ble_temperature_kukhnia') }}°C*, {{ states('sensor.ble_humidity_kukhnia') }}%

        *Статус устройств*
        # `-= Датчики протечки =-`
        `-= Увлажнитель =-`
        Гостинная: *{{ states('binary_sensor.humidifier_nursery_status') }}*
        `-= Розетки =-`
        Розетка TP-Link SmartPlug 01: *{{ states('switch.tplink_smartplug_01') }}*
        `-= ТВ =-`
        # Гостинная: *{{ states('media_player.samsungtv_ue46es5507') }}*
        `-= Chromecast =-`
        Гостинная: *{{ states('media_player.shield') }}*
        `-= Разное =-`
        Входная дверь: *{{ states('sensor.entrance_door_status') }}*
        # Mi Robot: *{{ states('vacuum.xiaomi_vacuum_cleaner') }}*
        # Водонагреватель: *{{ states('sensor.boiler_status') }}* ({{ states('sensor.tplinksmartplug01_watts') }} W)
        Transmission Status: *{{ states('sensor.transmission_status') }}*
        # Plex Users: *{{ states('sensor.plex_plexonubuntu') }}*
