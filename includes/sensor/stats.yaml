- platform: systemmonitor
  resources:
  - type: processor_use
  - type: memory_use_percent
  - type: disk_use_percent
    arg: /
  - type: disk_free
    arg: /
  - type: last_boot

#- platform: cpuspeed

- platform: filesize
  file_paths:
    - /config/home-assistant_v2.db
    - /config/home-assistant.log

# Home Assistant Online
- platform: uptime
  unit_of_measurement: minutes

## Version Check ###############################################################

- platform: version
  name: ha_version_current
  source: local

- platform: version
  name: ha_version_latest
  source: docker  
  scan_interval: 1800 

- platform: template
  sensors:
    version_check:
      value_template: "{{ states('sensor.version_latest') == states('sensor.version_current') }}"
      friendly_name: "Ha UpToDate check"

#######################################################################

- platform: time_date
  display_options:
  - 'time'
  - 'date'
  - 'time_date'

## Stats Home ##################################################################

#- platform: template
#  sensors:
#    ha_uptime:
#      friendly_name: Hass.io Uptime
#      value_template: >
#        {% if states('sensor.uptime') == '0.0' %} 
#        Gerade neu gestartet...
#        {% else %}
#        {% macro phrase(value, name) %}
#        {%- set value = value | int %}
#        {%- set end = 's' if value > 1 else '' %}
#        {{- '{} {}{}'.format(value, name, end) if value | int > 0 else '' }}
#        {%- endmacro %}
#        
#        {% set weeks = (states('sensor.uptime') | int / 7) | int %}
#        {% set days = (states('sensor.uptime') | int) - (weeks * 7) %}
#        {% set hours = (states('sensor.uptime') | float - states('sensor.uptime') | int) * 24 %}
#        {% set minutes = (hours - hours | int) * 60 %}
#        {{ [ phrase(weeks, 'week'), phrase(days, 'day'), phrase(hours, 'hr'), phrase(minutes, 'min') ] | select('!=','') | list | join(', ') }}
#        {% endif %}

- platform: template
  sensors:
    rpi_uptime: # Время с последней перезагрузки Raspberry
      value_template: >
         {% set uptime = as_timestamp (now()) -as_timestamp(states.sensor.last_boot.state) | int %}
         {% set minutes = (( uptime % 3600) / 60) | int %}
         {% set hours = ((uptime % 86400) / 3600) | int %}
         {% set days = (uptime / 86400) | int %}
           {% if uptime < 1 %}
             Меньше минуты
           {% else %}
             {% if days > 0 %}
               {{ days }} д.
             {% endif %}
             {% if hours > 0 %}
               {% if days > 0 %}
                 {{ ' ' }}
               {% endif %}
               {{ hours }} ч.
             {% endif %}
             {% if minutes > 0 %}
               {% if days > 0 or hours > 0 %}
                 {{ ' ' }}
               {% endif %}
                 {{ minutes }} мин.
             {% endif %}
           {% endif %}

- platform: template
  sensors:
     ha_uptime: # аптайм Home Assistant
      value_template: >
        {% set uptime = states('sensor.uptime') | int %}
        {% set minutes = (( uptime % 60) / 1) | int %}
        {% set hours = ((uptime % 1440) / 60) | int %}
        {% set days = (uptime / 1440) | int %}
          {% if uptime < 1 %}
            Меньше минуты
          {% else %}
            {% if days > 0 %}
              {{ days }} д.
            {% endif %}
            {% if hours > 0 %}
              {% if days > 0 %}
                {{ ' ' }}
              {% endif %}
              {{ hours }} ч.
            {% endif %}
            {% if minutes > 0 %}
              {% if days > 0 or hours > 0 %}
                {{ ' ' }}
              {% endif %}
                {{ minutes }} мин.
            {% endif %}
          {% endif %}

- platform: template
  sensors:
    drink_water_yesterday: # Расход питьевой воды (вчера)
      friendly_name: Расход питьевой воды (вчера)
      icon_template: mdi:gauge
      unit_of_measurement: 'л'
      value_template: "{{ state_attr('sensor.drink_water_daily_single', 'last_period') | float }}"

- platform: template
  sensors:
    miwifi3_mb_received: 
      friendly_name: Xiaomi Mi R3 Wireless Router MB received
      icon_template: mdi:download-network
      unit_of_measurement: 'MB' 
      value_template: "{{ (states('sensor.xiaomi_mi_mini_wireless_router_b_received') | float / 1048576) | round(2) }}" 

- platform: template
  sensors:
    miwifi3_mb_sent: 
      friendly_name: "Xiaomi Mi R3 Wireless Router MB sent" 
      icon_template: mdi:upload-network
      unit_of_measurement: 'MB' 
      value_template: "{{ (states('sensor.xiaomi_mi_mini_wireless_router_b_sent') | float / 1048576) | round(2) }}" 

- platform: template
  sensors:
    miwifi3_mb_received_speed: 
      friendly_name: "Xiaomi Mi R3 Wireless Router Mbit/s received"
      icon_template: mdi:download-network 
      unit_of_measurement: 'Mbit/s' 
      value_template: "{{ (states('sensor.xiaomi_mi_mini_wireless_router_kib_s_received') | float / 122) | round(2) }}"

- platform: template
  sensors:
    miwifi3_mb_sent_speed: 
      friendly_name: "Xiaomi Mi R3 Wireless Router Mbit/s sent" 
      icon_template: mdi:upload-network
      unit_of_measurement: 'Mbit/s' 
      value_template: "{{ (states('sensor.xiaomi_mi_mini_wireless_router_kib_s_sent') | float / 122) | round(2) }}"

- platform: command_line
  name: processor_temp
  command: "cat /sys/class/thermal/thermal_zone0/temp"
  unit_of_measurement: "°C"
  value_template: '{{ (value | multiply(0.001)) | round(1) }}'

- platform: command_line
  name: CPU get_throttled
  command: "cat /sys/devices/platform/soc/soc:firmware/get_throttled"

- platform: command_line
  name: processor_freq
  command: "cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq"
  unit_of_measurement: "МГц"
  value_template: '{{ (value | multiply(0.001)) | round(1) }}'